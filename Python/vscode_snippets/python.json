{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Function template": {
		"prefix": "def ",
		"body": [
			"def $1($2):",
			"\t\"\"\"",
			"",
			"\tParam:",
			"\t------",
			"\t$2",
			"",
			"\tReturn:",
			"\t-------",
			"\t$3",
			"\t\"\"\"",
			"",
			"\treturn $3"
		],
		"description": "python function template with docstring and return"
	},

	"Print function": {
		"prefix": "pri",
		"body": "print(\"$1\", $2)",
		"description": "print snippet"
	},

	"Abstract class": {
		"prefix": "baseclass",
		"body": [
			"from abc import ABC, abstractmethod",
			"",
			"class baseClass(ABC):",
			"\t\"\"\"",
			"\t\"\"\"",
			"",
			"\tdef __init__(self):",
			"\t\treturn",
			"",
			"\t@abstractmethod",
			"\tdef something(self):",
			"\t\traise NotImplementedError(\"the function someting has not been implemented yet\")"
		]
	}
}